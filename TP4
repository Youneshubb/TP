#include <stdio.h>
#include <stdlib.h>
#include <string.h>


typedef struct Etudiant {
    int ID;
    char nom[50];
    float moyenne;
    struct Etudiant* suivant;
    struct Etudiant* precedent;
} Etudiant;



Etudiant* creer_etudiant() {
    Etudiant* nv = (Etudiant*)malloc(sizeof(Etudiant));
    if (nv == NULL) {
        return NULL;
    }

    printf("Veuillez entrer l'ID: ");
    scanf("%d", &nv->ID);
    getchar();
    printf("Veuillez entrer le nom: ");
    scanf("%s", nv->nom);
    printf("Veuillez entrer la moyenne: ");
    scanf("%f", &nv->moyenne);

    nv->suivant = NULL;
    nv->precedent = NULL;

    return nv;
}



Etudiant* ajouter_position(Etudiant* tete, Etudiant* nv, int position) {
    if (position < 1) {
        printf("Position invalide");
        return tete;
    }

    if (position == 1) {
        nv->suivant = tete;
        if (tete != NULL) {
            tete->precedent = nv;
        }
        return nv;
    }

    Etudiant* courant = tete;
    int i = 1;
    while (courant != NULL && i < position - 1) {
        courant = courant->suivant;
        i++;
    }

    if (courant == NULL) {
        return tete;
    }

    nv->suivant = courant->suivant;
    nv->precedent = courant;
    if (courant->suivant != NULL) {
        courant->suivant->precedent = nv;
    }
    courant->suivant = nv;

    return tete;
}



Etudiant* supprimer_position(Etudiant* tete, int position) {
    if (position < 1) {
        printf("Position invalide");
        return tete;
    }

    Etudiant* courant = tete;
    int i = 1;
    while (courant != NULL && i < position) {
        courant = courant->suivant;
        i++;
    }

    if (courant == NULL) {
        return tete;
    }

    if (courant->precedent != NULL) {
        courant->precedent->suivant = courant->suivant;
    } else {
        tete = courant->suivant;
    }

    if (courant->suivant != NULL) {
        courant->suivant->precedent = courant->precedent;
    }

    free(courant);
    return tete;
}



void afficher_liste(Etudiant* tete) {
    Etudiant* courant = tete;
    while (courant != NULL) {
        printf("%d, %s, %.2f", courant->ID, courant->nom, courant->moyenne);
        courant = courant->suivant;
    }
}



Etudiant* derniere_cellule(Etudiant* tete) {
    Etudiant* courant = tete;
    while (courant != NULL && courant->suivant != NULL) {
        courant = courant->suivant;
    }
    return courant;
}



void afficher_liste_inverse(Etudiant* dernier) {
    Etudiant* courant = dernier;
    while (courant != NULL) {
        printf("%d, %s, %.2f", courant->ID, courant->nom, courant->moyenne);
        courant = courant->precedent;
    }
}



int chercher_etudiant(Etudiant* tete, int id) {
    Etudiant* courant = tete;
    while (courant != NULL) {
        if (courant->ID == id) {
            printf("Étudiant trouvé");
        }
        courant = courant->suivant;
    }
    return 0;
}



void separer_par_moyenne(Etudiant* tete, Etudiant** liste_mention, Etudiant** liste_non_mention) {
    Etudiant* courant = tete;
    while (courant != NULL) {
        Etudiant* nv = (Etudiant*)malloc(sizeof(Etudiant));
        if (nv == NULL) {
            return;
        }
        nv->ID = courant->ID;
        strcpy(nv->nom, courant->nom);
        nv->moyenne = courant->moyenne;
        nv->suivant = NULL;
        nv->precedent = NULL;

        if (courant->moyenne >= 10) {
            *liste_mention = ajouter_position(*liste_mention, nv, 1);
        } else {
            *liste_non_mention = ajouter_position(*liste_non_mention, nv, 1);
        }

        courant = courant->suivant;
    }
}




int main() {

    Etudiant* tete = NULL;
    Etudiant* liste_mention = NULL;
    Etudiant* liste_non_mention = NULL;
    int choix, position, id;

    do {
        printf("1. Ajouter un etudiant");
        printf("2. Afficher la liste des etudiants");
        printf("3. Ajouter un etudiant a une position donnee");
        printf("4. Supprimer un etudiant d'une position donnee");
        printf("5. Rechercher un etudiant par ID");
        printf("6. Afficher la liste des etudiants en sens inverse");
        printf("7. Separer les etudiants par moyenne");
        printf("8. Quitter");
        printf("Choix : ");
        scanf("%d", &choix);

        switch (choix) {
            case 1: {
                Etudiant* etudiant = creer_etudiant();
                tete = ajouter_position(tete, etudiant, 1);
                break;
            }
            case 2:
                afficher_liste(tete);
                break;
            case 3: {
                printf("Entrez la position a laquelle ajouter l'etudiant : ");
                scanf("%d", &position);
                Etudiant* etudiant = creer_etudiant();
                tete = ajouter_position(tete, etudiant, position);
                break;
            }
            case 4:
                printf("Entrez la position a laquelle supprimer l'etudiant : ");
                scanf("%d", &position);
                tete = supprimer_position(tete, position);
                break;
            case 5:
                printf("Entrez l'ID de l'etudiant a rechercher : ");
                scanf("%d", &id);
                if (chercher_etudiant(tete, id)) {
                    printf("Trouve");
                } else {
                    printf("Non trouve");
                }
                break;
            case 6: {
                Etudiant* dernier = derniere_cellule(tete);
                afficher_liste_inverse(dernier);
                break;
            }
            case 7:
                separer_par_moyenne(tete, &liste_mention, &liste_non_mention);
                printf("Avec mention :");
                afficher_liste(liste_mention);
                printf("Sans mention :");
                afficher_liste(liste_non_mention);
                break;
            case 8:
                printf("Fin du programme");
                break;
            default:
                printf("Choix invalide");
        }

    } while (choix != 8);

    return 0;
}
