#include <stdio.h>
#include <stdlib.h>


typedef struct Noeud {
    int valeur;
    struct Noeud *suivant;
    struct Noeud *precedent;
} Noeud;

Noeud *cree(int val) {
    Noeud *NV = (Noeud *)malloc(sizeof(Noeud));
    NV->precedent = NULL;
    NV->suivant = NULL;
    NV->valeur = val;
    return NV;
}



void afficher(Noeud *debut) {
    Noeud *courant = debut;
    while (courant != NULL) {
        printf("%d, %p, %p, %p", courant->valeur, courant, courant->suivant, courant->precedent);
        courant = courant->suivant;
    }
}



Noeud *afficherIN(Noeud *debut) {
    if (debut == NULL) {
        return NULL;
    }
    Noeud *courant = debut;
    while (courant->suivant != NULL) {
        courant = courant->suivant;
    }
    while (courant != NULL) {
        printf("%d", courant->valeur);
        courant = courant->precedent;
    }
    return courant;
}




void ajouterD(Noeud **debut, int val) {
    Noeud *NV = cree(val);
    NV->suivant = *debut;
    if (*debut != NULL) {
        (*debut)->precedent = NV;
    }
    *debut = NV;
}



Noeud *ajouterF(Noeud *debut, int val) {
    Noeud *NV = cree(val);
    if (debut == NULL) {
        debut = NV;
    } else {
        Noeud *courant = debut;
        while (courant->suivant != NULL) {
            courant = courant->suivant;
        }
        courant->suivant = NV;
        NV->precedent = courant;
    }
    return debut;
}



int taille(Noeud *debut) {
    int taille = 0;
    Noeud *courant = debut;
    while (courant != NULL) {
        taille++;
        courant = courant->suivant;
    }
    return taille;
}




Noeud *insertion(Noeud *debut, int val, int pos) {
    if (pos < 1 || pos > taille(debut) + 1) {
        return debut;
    }
    Noeud *NV = cree(val);
    if (pos == 1) {
        NV->suivant = debut;
        if (debut != NULL) {
            debut->precedent = NV;
        }
        debut = NV;
    } else {
        Noeud *tmp = debut;
        int c = 1;
        while (tmp != NULL && c != pos - 1) {
            c++;
            tmp = tmp->suivant;
        }
        NV->suivant = tmp->suivant;
        if (tmp->suivant != NULL) {
            tmp->suivant->precedent = NV;
        }
        NV->precedent = tmp;
        tmp->suivant = NV;
    }
    return debut;
}




Noeud *rechercher(Noeud *debut, int val) {
    Noeud *tmp = debut;
    while (tmp != NULL) {
        if (tmp->valeur == val) {
            return tmp;
        }
        tmp = tmp->suivant;
    }
    return NULL;
}




Noeud *supprimerD(Noeud *debut) {
    if (debut == NULL) {
        return debut;
    }
    Noeud *tmp = debut;
    debut = debut->suivant;
    if (debut != NULL) {
        debut->precedent = NULL;
    }
    free(tmp);
    return debut;
}




Noeud *supprimerF(Noeud *debut) {
    if (debut == NULL) {
        return debut;
    }
    Noeud *tmp = debut;
    while (tmp->suivant != NULL) {
        tmp = tmp->suivant;
    }
    if (tmp->precedent != NULL) {
        tmp->precedent->suivant = NULL;
    } else {
        debut = NULL;
    }
    free(tmp);
    return debut;
}



Noeud *supprimerP(Noeud *debut, int pos) {
    if (pos < 1 || pos > taille(debut)) {
        return debut;
    }
    Noeud *courant = debut;
    for (int i = 1; i < pos; i++) {
        courant = courant->suivant;
    }
    if (courant->precedent != NULL) {
        courant->precedent->suivant = courant->suivant;
    } else {
        debut = courant->suivant;
    }
    if (courant->suivant != NULL) {
        courant->suivant->precedent = courant->precedent;
    }
    free(courant);
    return debut;
}



Noeud *modifierD(Noeud *debut, int val) {
    if (debut != NULL) {
        debut->valeur = val;
    }
    return debut;
}


Noeud *modifierF(Noeud *debut, int val) {
    if (debut == NULL) {
        return NULL;
    }
    Noeud *courant = debut;
    while (courant->suivant != NULL) {
        courant = courant->suivant;
    }
    courant->valeur = val;
    return debut;
}


Noeud *modifierP(Noeud *debut, int pos, int val) {
    if (pos < 1 || pos > taille(debut)) {
        return debut;
    }
    Noeud *courant = debut;
    for (int i = 1; i < pos; i++) {
        courant = courant->suivant;
    }
    courant->valeur = val;
    return debut;
}



Noeud *triSelection(Noeud *debut) {
    if (debut == NULL || debut->suivant == NULL) {
        return debut;
    }
    Noeud *temp1 = debut;
    while (temp1 != NULL) {
        Noeud *min = temp1;
        Noeud *temp2 = temp1->suivant;
        while (temp2 != NULL) {
            if (temp2->valeur < min->valeur) {
                min = temp2;
            }
            temp2 = temp2->suivant;
        }
        if (min != temp1) {
            int temp = temp1->valeur;
            temp1->valeur = min->valeur;
            min->valeur = temp;
        }
        temp1 = temp1->suivant;
    }
    return debut;
}





int main() {

    Noeud *debut = NULL;
    debut = ajouterF(debut, 5);  
    debut = ajouterF(debut, 15);  
    debut = ajouterF(debut, 25);  
    

    ajouterD(&debut, 30);  
    afficher(debut);


    debut = ajouterF(debut, 66);  
    afficher(debut);


    debut = insertion(debut, 200, 2);  
    afficher(debut);


    if (rechercher(debut, 700)) {
        printf("La valeur existe");
    } else {
        printf("La valeur n existe pas");
    }


    debut = modifierD(debut, 45);  
    afficher(debut);


    debut = modifierP(debut, 2, 100);
    afficher(debut);


    debut = supprimerD(debut);  
    afficher(debut);


    debut = supprimerP(debut, 3);  
    afficher(debut);


    debut = triSelection(debut);
    afficher(debut);









    return 0;
}
