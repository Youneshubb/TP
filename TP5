#include <stdio.h>
#include <stdlib.h>


typedef struct Noeud {
    int valeur;
    struct Noeud *suivant;
} Noeud;


Noeud *cree(int valeur) {
    Noeud *nv = (Noeud *) malloc(sizeof(Noeud));
    nv->valeur = valeur;
    nv->suivant = NULL;
    return nv;
}


void affiche(Noeud *debut) {
    if (debut == NULL) {
        printf("La liste est vide");
        return;
    }
    Noeud *courant = debut;
    printf("l'adresse de debut est %p", debut);
    do {
        printf("%d, %p, %p", courant->valeur, courant, courant->suivant);
        courant = courant->suivant;
    } while (courant != debut);
}



void afficheM(Noeud *debut) {
    if (debut == NULL) {
        printf("La liste est vide");
        return;
    }
    Noeud *courant = debut;
    printf("Liste circulaire :");
    while (courant->suivant != debut) {
        printf("%d, %p, %p", courant->valeur, courant, courant->suivant);
        courant = courant->suivant;
    }
    printf("%d");
}



Noeud *ajouterD(Noeud *debut, int val) {
    Noeud *nv = cree(val);
    if (debut == NULL) {
        nv->suivant = nv;
        return nv;
    } else {
        Noeud *ptr = debut;
        while (ptr->suivant != debut) {
            ptr = ptr->suivant;
        }
        ptr->suivant = nv;
        nv->suivant = debut;
        debut = nv;
        return debut;
    }
}



Noeud *ajouterF(Noeud *debut, int val) {
    Noeud *nv = cree(val);
    if (debut == NULL) {
        nv->suivant = nv;
        return nv;
    } else {
        Noeud *ptr = debut;
        while (ptr->suivant != debut) {
            ptr = ptr->suivant;
        }
        ptr->suivant = nv;
        nv->suivant = debut;
        return debut;
    }
}



int taille(Noeud *debut) {
    int taille = 1;
    Noeud *ptr = debut;
    while (ptr->suivant != debut) {
        taille++;
        ptr = ptr->suivant;
    }
    return taille;
}



Noeud *ajouterM(Noeud *debut, int pos, int val) {
    if (pos < 1 || pos > taille(debut) + 1) {
        printf("Position invalide");
        return debut;
    }
    if (pos == 1) {
        return ajouterD(debut, val);
    }

    Noeud *nv = cree(val);
    Noeud *ptr = debut;
    for (int i = 1; i < pos - 1; i++) {
        ptr = ptr->suivant;
    }

    nv->suivant = ptr->suivant;
    ptr->suivant = nv;
    return debut;
}



Noeud *supprimerD(Noeud *debut) {
    if (debut == NULL) {
        return NULL;
    }
    if (debut->suivant == debut) {
        free(debut);
        return NULL;
    }

    Noeud *ptr = debut;
    while (ptr->suivant != debut) {
        ptr = ptr->suivant;
    }

    Noeud *tmp = debut;
    ptr->suivant = debut->suivant;
    debut = debut->suivant;
    free(tmp);
    return debut;
}



Noeud *supprimerF(Noeud *debut) {
    if (debut == NULL) {
        return NULL;
    }
    if (debut->suivant == debut) {
        free(debut);
        return NULL;
    }

    Noeud *ptr = debut;
    while (ptr->suivant->suivant != debut) {
        ptr = ptr->suivant;
    }

    free(ptr->suivant);
    ptr->suivant = debut;
    return debut;
}



Noeud *supprimerM(Noeud *debut, int pos) {
    if (debut == NULL || pos < 1 || pos > taille(debut)) {
        printf("Position invalide");
        return debut;
    }
    if (pos == 1) {
        return supprimerD(debut);
    }
    Noeud *ptr = debut;
    for (int i = 1; i < pos - 1; i++) {
        ptr = ptr->suivant;
    }
    Noeud *tmp = ptr->suivant;
    ptr->suivant = tmp->suivant;
    if (tmp == debut) {
        debut = ptr->suivant;
    }
    free(tmp);
    return debut;
}



int main() {

    Noeud *tete = NULL;
    Noeud *noeud1 = cree(10);
    Noeud *noeud2 = cree(20);
    Noeud *noeud3 = cree(30);

    printf("Adresse de la liste : %p", tete);
    printf("Adresse du noeud1 : %p", noeud1);
    printf("Adresse du noeud2 : %p", noeud2);
    printf("Adresse du noeud3 : %p", noeud3);

    tete = noeud1;
    noeud1->suivant = noeud2;
    noeud2->suivant = noeud3;
    noeud3->suivant = tete;

    printf("Adresse de la tete : %p", tete);
    printf("Suivant de noeud1 : %p", noeud1->suivant);
    printf("Suivant de noeud2 : %p", noeud2->suivant);
    printf("Suivant de noeud3 : %p", noeud3->suivant);


    tete = ajouterD(tete, 22);
    affiche(tete);

    tete = ajouterF(tete, 6);
    affiche(tete);

    tete = ajouterM(tete, 5, 700);
    affiche(tete);

    tete = supprimerD(tete);
    affiche(tete);

    tete = supprimerF(tete);
    affiche(tete);

    tete = supprimerM(tete, 3);
    affiche(tete);




    return 0;
}
